import matplotlib.pyplot as plt
import numpy as np

# Data extracted from training logs
models = ['ResNet101', 'ViT-B-16', 'Swin-T', 'ConvNeXt-Tiny', 'EfficientNet-B0', 'DenseNet121']
epochs = list(range(25))

# Training Loss
train_loss = {
    'ResNet101': [0.8836, 0.3852, 0.3158, 0.2910, 0.2672, 0.2209, 0.2429, 0.2308, 0.1882, 0.1789, 0.1765, 0.1753, 0.1583, 0.1731, 0.1544, 0.1644, 0.1340, 0.1340, 0.1236, 0.1265, 0.1568, 0.1531, 0.1229, 0.1309, 0.1227],
    'ViT-B-16': [0.6749, 0.3112, 0.2589, 0.2810, 0.1893, 0.1790, 0.1663, 0.1613, 0.1454, 0.1402, 0.1392, 0.1298, 0.1177, 0.1103, 0.1034, 0.1118, 0.1184, 0.0953, 0.0942, 0.1065, 0.1090, 0.1022, 0.0942, 0.0927, 0.0737],
    'Swin-T': [0.8772, 0.3911, 0.3227, 0.2807, 0.2374, 0.2255, 0.2153, 0.1951, 0.1961, 0.1904, 0.1788, 0.1717, 0.1730, 0.1488, 0.1314, 0.1472, 0.1339, 0.1238, 0.1302, 0.1329, 0.1178, 0.1170, 0.1190, 0.1117, 0.1156],
    'ConvNeXt-Tiny': [0.8203, 0.3836, 0.3285, 0.2776, 0.2912, 0.2486, 0.2387, 0.2211, 0.2175, 0.2129, 0.1906, 0.1812, 0.1713, 0.1874, 0.1804, 0.1591, 0.1643, 0.1661, 0.1496, 0.1535, 0.1271, 0.1429, 0.1446, 0.1410, 0.1350],
    'EfficientNet-B0': [1.3042, 0.7791, 0.5780, 0.4737, 0.4152, 0.4009, 0.3703, 0.3622, 0.3468, 0.3434, 0.3222, 0.3083, 0.3066, 0.2991, 0.2867, 0.2939, 0.2839, 0.2799, 0.2647, 0.2880, 0.2567, 0.2585, 0.2625, 0.2710, 0.2750],
    'DenseNet121': [0.9180, 0.4104, 0.3288, 0.3003, 0.2790, 0.2633, 0.2456, 0.2528, 0.2267, 0.2120, 0.2238, 0.1804, 0.1813, 0.1959, 0.1772, 0.1635, 0.1554, 0.1914, 0.1873, 0.1656, 0.1469, 0.1635, 0.1746, 0.1433, 0.1623]
}

# Training Accuracy
train_acc = {
    'ResNet101': [0.7028, 0.8635, 0.8841, 0.8938, 0.9118, 0.9236, 0.9148, 0.9144, 0.9328, 0.9399, 0.9381, 0.9390, 0.9438, 0.9399, 0.9478, 0.9438, 0.9570, 0.9500, 0.9601, 0.9561, 0.9464, 0.9469, 0.9543, 0.9574, 0.9601],
    'ViT-B-16': [0.7669, 0.8916, 0.9083, 0.9030, 0.9254, 0.9363, 0.9442, 0.9456, 0.9447, 0.9517, 0.9522, 0.9526, 0.9574, 0.9587, 0.9636, 0.9596, 0.9587, 0.9662, 0.9680, 0.9631, 0.9614, 0.9649, 0.9662, 0.9706, 0.9745],
    'Swin-T': [0.6918, 0.8547, 0.8863, 0.9056, 0.9210, 0.9258, 0.9254, 0.9359, 0.9289, 0.9236, 0.9377, 0.9429, 0.9412, 0.9442, 0.9561, 0.9473, 0.9530, 0.9587, 0.9557, 0.9570, 0.9614, 0.9644, 0.9587, 0.9565, 0.9614],
    'ConvNeXt-Tiny': [0.7221, 0.8657, 0.8872, 0.9069, 0.8907, 0.9157, 0.9192, 0.9205, 0.9205, 0.9219, 0.9337, 0.9346, 0.9403, 0.9355, 0.9368, 0.9412, 0.9421, 0.9421, 0.9442, 0.9469, 0.9570, 0.9442, 0.9482, 0.9517, 0.9530],
    'EfficientNet-B0': [0.5417, 0.8086, 0.8301, 0.8516, 0.8630, 0.8670, 0.8788, 0.8793, 0.8797, 0.8810, 0.8907, 0.8837, 0.8881, 0.8986, 0.8960, 0.9008, 0.9043, 0.9043, 0.9096, 0.8990, 0.9131, 0.9025, 0.9109, 0.8995, 0.8977],
    'DenseNet121': [0.6708, 0.8644, 0.8898, 0.9012, 0.8938, 0.9043, 0.9131, 0.9118, 0.9157, 0.9276, 0.9175, 0.9372, 0.9368, 0.9293, 0.9434, 0.9403, 0.9469, 0.9284, 0.9324, 0.9403, 0.9491, 0.9438, 0.9399, 0.9513, 0.9403]
}

# Validation Loss
val_loss = {
    'ResNet101': [0.4458, 0.3852, 0.3154, 0.3066, 0.3022, 0.2668, 0.2649, 0.2827, 0.2489, 0.2581, 0.2507, 0.2399, 0.2440, 0.2654, 0.2684, 0.2573, 0.2390, 0.2221, 0.2675, 0.2617, 0.2431, 0.2356, 0.2082, 0.2200, 0.2490],
    'ViT-B-16': [0.3812, 0.3539, 0.4389, 0.2935, 0.2685, 0.3256, 0.2767, 0.2654, 0.2549, 0.2384, 0.2525, 0.2878, 0.2241, 0.2061, 0.2257, 0.2537, 0.2751, 0.2415, 0.2349, 0.2562, 0.2424, 0.1959, 0.2872, 0.2594, 0.2356],
    'Swin-T': [0.4173, 0.3628, 0.3087, 0.3348, 0.2800, 0.2511, 0.2756, 0.2832, 0.2391, 0.3183, 0.2061, 0.2676, 0.2735, 0.2373, 0.2303, 0.2429, 0.2225, 0.2709, 0.2522, 0.2062, 0.2642, 0.2139, 0.2465, 0.2706, 0.2864],
    'ConvNeXt-Tiny': [0.3996, 0.3475, 0.2634, 0.3772, 0.2888, 0.2473, 0.1911, 0.1932, 0.3048, 0.2572, 0.2116, 0.2190, 0.1966, 0.2030, 0.1792, 0.1945, 0.1903, 0.1774, 0.1877, 0.2227, 0.1814, 0.2058, 0.2003, 0.2015, 0.1739],
    'EfficientNet-B0': [0.9362, 0.6226, 0.4894, 0.4296, 0.3830, 0.3774, 0.3385, 0.3060, 0.3087, 0.3240, 0.3068, 0.2838, 0.3006, 0.3164, 0.2842, 0.3009, 0.2643, 0.2749, 0.2579, 0.2794, 0.2541, 0.2565, 0.2511, 0.2538, 0.2578],
    'DenseNet121': [0.4462, 0.3252, 0.3079, 0.2734, 0.2817, 0.2378, 0.2147, 0.2367, 0.2398, 0.2399, 0.2673, 0.2373, 0.2160, 0.1900, 0.2037, 0.2269, 0.2056, 0.1997, 0.2039, 0.1905, 0.2302, 0.1900, 0.1988, 0.2201, 0.1835]
}

# Validation Accuracy
val_acc = {
    'ResNet101': [0.8544, 0.8614, 0.8842, 0.8912, 0.8912, 0.9123, 0.9035, 0.9123, 0.9035, 0.8965, 0.9193, 0.9175, 0.9263, 0.9088, 0.9053, 0.9088, 0.9175, 0.9281, 0.9158, 0.9158, 0.9211, 0.9228, 0.9175, 0.9263, 0.9035],
    'ViT-B-16': [0.8614, 0.8614, 0.8404, 0.9105, 0.9053, 0.8877, 0.9053, 0.9140, 0.9228, 0.9228, 0.9088, 0.9070, 0.9281, 0.9333, 0.9228, 0.9158, 0.9123, 0.9123, 0.9193, 0.9070, 0.9158, 0.9368, 0.9088, 0.9158, 0.9333],
    'Swin-T': [0.8474, 0.8719, 0.8842, 0.8825, 0.9035, 0.9158, 0.9035, 0.9123, 0.9123, 0.9018, 0.9263, 0.9123, 0.9105, 0.9333, 0.9228, 0.9158, 0.9333, 0.9281, 0.9368, 0.9316, 0.9193, 0.9386, 0.9228, 0.9246, 0.9263],
    'ConvNeXt-Tiny': [0.8754, 0.8789, 0.8982, 0.8491, 0.8842, 0.9211, 0.9281, 0.9246, 0.8912, 0.9211, 0.9211, 0.9246, 0.9298, 0.9351, 0.9474, 0.9333, 0.9281, 0.9368, 0.9351, 0.9351, 0.9281, 0.9333, 0.9211, 0.9228, 0.9474],
    'EfficientNet-B0': [0.7877, 0.8456, 0.8509, 0.8754, 0.8912, 0.8842, 0.8895, 0.9018, 0.8912, 0.8982, 0.9070, 0.9053, 0.9035, 0.9000, 0.8982, 0.9000, 0.9175, 0.9105, 0.9070, 0.9123, 0.9175, 0.8965, 0.9140, 0.9035, 0.9105],
    'DenseNet121': [0.8509, 0.8877, 0.8895, 0.8947, 0.9035, 0.9140, 0.9211, 0.8877, 0.9175, 0.9070, 0.9105, 0.9070, 0.9228, 0.9368, 0.9368, 0.9088, 0.9333, 0.9228, 0.9351, 0.9351, 0.9316, 0.9263, 0.9228, 0.9158, 0.9263]
}

# 设置绘图风格和参数
plt.style.use('default')  # 使用默认风格
figsize = (12, 7)  # 增大图形尺寸
fontsize = 14  # 增大字体大小
linewidth = 2
marker_size = 6

# 设置全局字体
plt.rcParams['font.family'] = 'Times New Roman'
plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['font.weight'] = 'bold'  # 设置字体粗细
plt.rcParams['axes.labelweight'] = 'bold'  # 设置轴标签粗细
plt.rcParams['axes.titleweight'] = 'bold'  # 设置标题粗细

# 训练损失曲线图
plt.figure(figsize=figsize)
for model in models:
    plt.plot(epochs, train_loss[model], label=model, linewidth=linewidth, marker='o', markersize=marker_size)

plt.title('Training Loss Curves', fontsize=fontsize + 5, pad=15, weight='bold')  # 增大标题字体
plt.xlabel('Epoch', fontsize=fontsize + 4, weight='bold')  # 增大轴标签字体
plt.ylabel('Training Loss', fontsize=fontsize + 4, weight='bold')
plt.legend(fontsize=fontsize+6, loc='upper right', prop={'weight': 'bold'})  # 加粗图例
plt.grid(True, linestyle='--', alpha=0.7)

# 美化坐标轴
plt.tick_params(axis='both', labelsize=fontsize + 2)  # 增大刻度标签字体
plt.tight_layout()

# 保存图片
plt.savefig('training_loss_curves.png', dpi=300, bbox_inches='tight')
plt.show()

# 验证损失曲线图
plt.figure(figsize=figsize)
for model in models:
    plt.plot(epochs, val_loss[model], label=model, linewidth=linewidth, marker='o', markersize=marker_size)

plt.title('Validation Loss Curves', fontsize=fontsize + 6, pad=15, weight='bold')  # 增大标题字体
plt.xlabel('Epoch', fontsize=fontsize + 4, weight='bold')  # 增大轴标签字体
plt.ylabel('Validation Loss', fontsize=fontsize + 4, weight='bold')
plt.legend(fontsize=fontsize, loc='upper right', prop={'weight': 'bold'})  # 加粗图例
plt.grid(True, linestyle='--', alpha=0.7)

# 美化坐标轴
plt.tick_params(axis='both', labelsize=fontsize + 2)  # 增大刻度标签字体
plt.tight_layout()

# 保存图片
plt.savefig('validation_loss_curves.png', dpi=300, bbox_inches='tight')
plt.show()